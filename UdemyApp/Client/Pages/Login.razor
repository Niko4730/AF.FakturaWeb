@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Email" @bind-Value="user.Email"
                          For="@(() => user.Email)"
                          HelperText="Must be a valid Email"></MudTextField>
            <MudTextField Label="Password" @bind-Value="user.Password"
                          For="@(() => user.Password)"
                          InputType="InputType.Password"
                          HelperText="Must be a valid Password"></MudTextField>
        </MudCardContent>
    </MudCard>
    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mb-2">Login</MudButton>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
