@page "/rules"
@inject IRuleService RuleService
@inject NavigationManager NavigationManager
@inject IMailService MailService
@attribute [Authorize]

<PageTitle>List of rules</PageTitle>

@if (rules == null)
{
    <span>Loading your rules...</span>
}
else if (rules.Count <= 0)
{
    <span>You have no rules</span>
    <br />
    <MudButton Variant="Variant.Filled" @onclick="CreateRule">Create Rule</MudButton>
}
else
{
    <MudTable Items="rules" Hover="true" Striped="true" Dense="true" Class="mb-2">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description </MudTh>
            <MudTh>Occurence</MudTh>
            <MudTh>Edit</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Occurrence">@context.Occurrence</MudTd>
            <MudTd>
                <MudIconButton OnClick="(() => ShowRule(context.Id))"
                           Icon="@Icons.Material.Filled.Edit"
                           Color="Color.Primary"
                           Variant="Variant.Filled"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="CreateRule" Class="m-2">Create Rule</MudButton>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Email" @onclick="SendEmail">Send Email</MudButton>
}

@code {
    List<Rule> rules = null;

    protected override async Task OnInitializedAsync()
    {
        rules = await RuleService.GetRules();
    }
    void SendEmail()
    {
        NavigationManager.NavigateTo("/sendEmail");
    }
    void CreateRule()
    {
        NavigationManager.NavigateTo("/addRule");
    }
    void ShowRule(int id)
    {
        NavigationManager.NavigateTo($"rule/{id}");
    }
}

