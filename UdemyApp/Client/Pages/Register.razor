@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Email)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" type="password" @bind-Value="user.Password" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.Password)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" @bind-Value="user.ConfirmPassword" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.ConfirmPassword)"></ValidationMessage>
    </div>
    <button class="btn btn-primary" type="submit" >Register!</button>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>

@code {
    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;
        if (result.Success)
        {
            messageCssClass = "text-success";
            NavigationManager.NavigateTo("/login");
        }
        else
            messageCssClass = "text-danger";      
    }
}
