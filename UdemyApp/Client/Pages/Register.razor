@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Email" @bind-Value="user.Email"
                          For="@(() => user.Email)"
                          HelperText="Must be a valid Email"></MudTextField>
            <MudTextField Label="Password" @bind-Value="user.Password"
                          For="@(() => user.Password)"
                          InputType="InputType.Password"
                          HelperText="Must be a valid Password"></MudTextField>
            <MudTextField Label="ConfirmPassword" @bind-Value="user.ConfirmPassword"
                          For="@(() => user.ConfirmPassword)"
                          InputType="InputType.Password"
                          HelperText="The password must match"></MudTextField>
        </MudCardContent>
    </MudCard>
    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Class="mt-2">Register!</MudButton>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>

@code {
    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(user);
        message = result.Message;
        if (result.Success)
        {
            messageCssClass = "text-success";
            NavigationManager.NavigateTo("/login");
        }
        else
            messageCssClass = "text-danger";
    }
}
