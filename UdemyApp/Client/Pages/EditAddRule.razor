@page "/addRule"
@page "/rule/{id:int}"
@inject IAuthService AuthService
@inject IRuleService RuleService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (Id == null)
{
    <PageTitle>Create Rule</PageTitle>
    <h3>Create a new rule</h3>
}
else
{
    <PageTitle><h3>Edit @rule.Title</h3></PageTitle>
    <h3>Edit @rule.Title</h3>
}

<EditForm Model="rule" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="rule.Title" class="form-control" required></InputText>
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="rule.Description" class="form-control"></InputText>
    </div>
    <div>
        <label for="occurence">Occurence</label>
        <InputText id="occurence" @bind-Value="rule.Occurrence" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-success">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteProduct">@btnTextDelete</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;
    string btnTextDelete = string.Empty;

    Rule rule = new Rule();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save new rule" : "Edit Rule";
        btnTextDelete = Id == null ? "Cancel" : "Delete rule";
        await RuleService.GetRules();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            rule.UserId = rule.UserId;
        }
        else
        {
            rule = (await RuleService.GetRuleById((int)Id)).Data;
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await RuleService.CreateRule(rule);
            NavigationManager.NavigateTo("/rules");
        }
        else
        {
            UpdateProduct();
        }
    }

    void CancelCreate()
    {
        NavigationManager.NavigateTo("/rules");
    }

    async void UpdateProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to update '{rule.Title}'?");
        if (confirmed)
        {
            await RuleService.UpdateRule(rule);
            NavigationManager.NavigateTo("rules");
        }
    }
    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{rule.Title}'?");
        if (confirmed)
        {
            await RuleService.DeleteRule(rule);
            NavigationManager.NavigateTo("rules");
        }
    }
}
